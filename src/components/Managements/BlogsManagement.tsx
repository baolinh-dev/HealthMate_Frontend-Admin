import React, { useEffect, useState } from "react";
import {
  fetchBlogs,
  searchBlogs,
  updateBlog,
  deleteBlog,
  addBlog,
} from "../../apis/blogsApi"; // Ensure addBlog is imported
import { Blog } from "../../interfaces/Blog"; 
import styles from './BlogsTableStyles';

const BlogsTable: React.FC = () => {
  const [blogs, setBlogs] = useState<Blog[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string>("");
  const [query, setQuery] = useState<string>("");
  const [status, setStatus] = useState<string>("");
  const [searchResult, setSearchResult] = useState<Blog[]>([]);
  const [selectedBlog, setSelectedBlog] = useState<Blog | null>(null);
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [isAddModalOpen, setIsAddModalOpen] = useState<boolean>(false);

  // State for new blog post
  const [newBlogTitle, setNewBlogTitle] = useState<string>("");
  const [newBlogContent, setNewBlogContent] = useState<string>("");
  const [newBlogStatus, setNewBlogStatus] = useState<"draft" | "published">(
    "draft"
  );
  const [newBlogImage, setNewBlogImage] = useState<string>("");

  useEffect(() => {
    const loadBlogs = async () => {
      try {
        const data = await fetchBlogs();
        setBlogs(data);
        setSearchResult(data);
      } catch (err) {
        setError("Error fetching blogs");
      } finally {
        setLoading(false);
      }
    };

    loadBlogs();
  }, []);

  const handleSearch = async () => {
    try {
      const data = await searchBlogs(query, status);
      setSearchResult(data);
    } catch (err) {
      setError("Error searching blogs");
    }
  };

  const handleEdit = (blog: Blog) => {
    setSelectedBlog(blog);
    setIsModalOpen(true);
  };

  const handleDelete = async (id: string) => {
    const confirmDelete = window.confirm(
      "Are you sure you want to delete this blog?"
    );
    if (confirmDelete) {
      try {
        await deleteBlog(id);
        setSearchResult((prev) => prev.filter((blog) => blog._id !== id));
      } catch (err) {
        setError("Error deleting blog");
      }
    }
  };

  const handleStatusChange = async (
    id: string,
    newStatus: "draft" | "published"
  ) => {
    try {
      await updateBlog(id, { status: newStatus });
      setSearchResult((prev) =>
        prev.map((blog) =>
          blog._id === id ? { ...blog, status: newStatus } : blog
        )
      );
    } catch (err) {
      setError("Error updating blog status");
    }
  };

  const handleModalSave = async (
    title: string,
    content: string,
    status: "draft" | "published",
    image: string
  ) => {
    if (selectedBlog) {
      try {
        await updateBlog(selectedBlog._id, { title, content, status, image }); // Include image in the update
        setSearchResult((prev) =>
          prev.map((blog) =>
            blog._id === selectedBlog._id
              ? { ...blog, title, content, status, image }
              : blog
          )
        );
      } catch (err) {
        setError("Error updating blog");
      }
    }
    handleModalClose();
  };

  const handleModalClose = () => {
    setIsModalOpen(false);
    setSelectedBlog(null);
  };

  const handleAddModalOpen = () => {
    setIsAddModalOpen(true);
  };

  const handleAddModalClose = () => {
    setIsAddModalOpen(false);
    setNewBlogTitle("");
    setNewBlogContent("");
    setNewBlogStatus("draft");
    setNewBlogImage("");
  };

  const handleAddBlog = async () => {
    try {
      const newBlog: Blog = {
        _id: "", // This will be generated by the server
        title: newBlogTitle,
        content: newBlogContent,
        image: newBlogImage,
        authorId: "", // Set the author ID as appropriate
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        status: newBlogStatus,
      };
      await addBlog(newBlog);
      setSearchResult((prev) => [...prev, newBlog]); // Update the search result with the new blog
      handleAddModalClose(); // Close the modal after adding
    } catch (err) {
      setError("Error adding blog");
    }
  };

  const tableStyle: React.CSSProperties = {
    width: "100%",
    borderCollapse: "collapse",
    margin: "20px 0",
  };

  const thTdStyle: React.CSSProperties = {
    padding: "12px",
    textAlign: "left",
    border: "1px solid #ddd",
  };

  const thStyle: React.CSSProperties = {
    backgroundColor: "#f2f2f2",
  };

  const imgStyle: React.CSSProperties = {
    width: "100px",
    height: "100px",
  };

  const handleQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setQuery(e.target.value);
  };

  const handleStatusChangeInput = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setStatus(e.target.value);
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>{error}</div>;
  }

  return (
    <div>
      <h2>Healthmate - Manage Blogs</h2>

      <div style={styles.searchGroup}>
        <input
          type="text"
          value={query}
          onChange={handleQueryChange}
          placeholder="Search by title"
          style={styles.searchInput}
        />

        <select style={styles.searchSelect} value={status} onChange={handleStatusChangeInput}>
          <option value="">All Status</option>
          <option value="draft">Draft</option>
          <option value="published">Published</option>
        </select>

        <button style={styles.searchButton} onClick={handleSearch}>Search</button>
      </div>

      <table style={tableStyle}>
        <thead>
          <tr>
            <th style={{ ...thTdStyle, ...thStyle }}>Title</th>
            <th style={{ ...thTdStyle, ...thStyle }}>Content</th>
            <th style={{ ...thTdStyle, ...thStyle }}>Status</th>
            <th style={{ ...thTdStyle, ...thStyle }}>Image</th>
            <th style={{ ...thTdStyle, ...thStyle }}>Action</th>
          </tr>
        </thead>
        <tbody>
          {searchResult.map((blog) => (
            <tr key={blog._id}>
              <td style={thTdStyle}>{blog.title}</td>
              <td style={thTdStyle}>{blog.content}</td>
              <td style={thTdStyle}>
                <select
                  value={blog.status}
                  onChange={(e) =>
                    handleStatusChange(
                      blog._id,
                      e.target.value as "draft" | "published"
                    )
                  }
                >
                  <option value="draft">Draft</option>
                  <option value="published">Published</option>
                </select>
              </td>
              <td style={thTdStyle}>
                <img src={blog.image} alt={blog.title} style={imgStyle} />
              </td>
              <td style={thTdStyle}>
                <div style={styles.actionGroup}>
                  <button
                    style={styles.editButton}
                    onClick={() => handleEdit(blog)}
                  >
                    Edit
                  </button>
                  <button
                    style={styles.deleteButton}
                    onClick={() => handleDelete(blog._id)}
                  >
                    Delete
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      <button onClick={handleAddModalOpen} style={styles.addButton}>
        Add New Blog
      </button>

      {/* Modal for adding a new blog */}
      {isAddModalOpen && (
        <div style={styles.modal}>
          <div style={styles.modal}>
            <h3>Add New Blog</h3>
            <input
              type="text"
              value={newBlogTitle}
              onChange={(e) => setNewBlogTitle(e.target.value)}
              placeholder="Title"
            />
            <textarea
              value={newBlogContent}
              onChange={(e) => setNewBlogContent(e.target.value)}
              placeholder="Content"
            />
            <select
              value={newBlogStatus}
              onChange={(e) =>
                setNewBlogStatus(e.target.value as "draft" | "published")
              }
            >
              <option value="draft">Draft</option>
              <option value="published">Published</option>
            </select>
            <input
              type="text"
              value={newBlogImage}
              onChange={(e) => setNewBlogImage(e.target.value)}
              placeholder="Image URL"
            />
            <button onClick={handleAddBlog}>Add Blog</button>
            <button onClick={handleAddModalClose}>Cancel</button>
          </div>
        </div>
      )}

      {/* Modal for editing blog */}
      {isModalOpen && (
        <div style={styles.modal}>
          <div style={styles.modalContent}>
            <h3>Edit Blog</h3>
            <input
              type="text"
              value={selectedBlog ? selectedBlog.title : ""}
              onChange={(e) =>
                setSelectedBlog((prev) =>
                  prev ? { ...prev, title: e.target.value } : prev
                )
              }
              placeholder="Title"
            />
            <textarea
              value={selectedBlog ? selectedBlog.content : ""}
              onChange={(e) =>
                setSelectedBlog((prev) =>
                  prev ? { ...prev, content: e.target.value } : prev
                )
              }
              placeholder="Content"
            />
            <select
              value={selectedBlog ? selectedBlog.status : "draft"}
              onChange={(e) =>
                setSelectedBlog((prev) =>
                  prev
                    ? {
                        ...prev,
                        status: e.target.value as "draft" | "published",
                      }
                    : prev
                )
              }
            >
              <option value="draft">Draft</option>
              <option value="published">Published</option>
            </select>
            <input
              type="text"
              value={selectedBlog ? selectedBlog.image : ""}
              onChange={(e) =>
                setSelectedBlog((prev) =>
                  prev ? { ...prev, image: e.target.value } : prev
                )
              }
              placeholder="Image URL"
            />
            <button
              onClick={() =>
                handleModalSave(
                  selectedBlog!.title,
                  selectedBlog!.content,
                  selectedBlog!.status,
                  selectedBlog!.image
                )
              }
            >
              Save
            </button>
            <button onClick={handleModalClose}>Cancel</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default BlogsTable;
