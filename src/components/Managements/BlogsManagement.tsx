import React, { useEffect, useState } from "react";
import {
  fetchBlogs,
  updateBlog,
  deleteBlog,
  addBlog,
} from "../../apis/blogsApi";
import { Blog } from "../../interfaces/Blog";
import styles from "./BlogsTableStyles";

const BlogsTable: React.FC = () => {
  const [blogs, setBlogs] = useState<Blog[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string>("");
  const [query, setQuery] = useState<string>(""); // Search text
  const [status, setStatus] = useState<string>(""); // Filter status
  const [searchBlog, setSearchBlog] = useState<string>(""); // Search query
  const [selectedBlog, setSelectedBlog] = useState<Blog | null>(null);
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [isAddModalOpen, setIsAddModalOpen] = useState<boolean>(false);
  const [page, setPage] = useState<number>(1); // Current page
  const [perPage, setPerPage] = useState<number>(5); // Number of blogs per page
  const [totalBlogs, setTotalBlogs] = useState<number>(0); // Total number of blogs

  // State for new blog post
  const [newBlogTitle, setNewBlogTitle] = useState<string>("");
  const [newBlogContent, setNewBlogContent] = useState<string>("");
  const [newBlogStatus, setNewBlogStatus] = useState<"draft" | "published">(
    "draft"
  );
  const [newBlogImage, setNewBlogImage] = useState<string>("");

  useEffect(() => {
    const loadBlogs = async () => {
      try {
        const { blogs, totalItems } = await fetchBlogs(
          page,
          perPage,
          searchBlog
        );
        setBlogs(blogs); // Set the blogs data
        setTotalBlogs(totalItems); // Set the total count of blogs for pagination
      } catch (err) {
        setError("Error fetching blogs");
      } finally {
        setLoading(false);
      }
    };

    loadBlogs();
  }, [page, perPage, searchBlog]); // Dependency on page, perPage, and searchBlog

  const handleSearch = () => {
    setPage(1); // Reset to the first page when searching
    setLoading(true); // Set loading state to true while fetching
  };

  const handleEdit = (blog: Blog) => {
    setSelectedBlog(blog);
    setIsModalOpen(true);
  };

  const handleDelete = async (id: string) => {
    const confirmDelete = window.confirm(
      "Are you sure you want to delete this blog?"
    );
    if (confirmDelete) {
      try {
        await deleteBlog(id);
      } catch (err) {
        setError("Error deleting blog");
      }
    }
  };

  const handleStatusChange = async (
    id: string,
    newStatus: "draft" | "published"
  ) => {
    try {
      await updateBlog(id, { status: newStatus });
    } catch (err) {
      setError("Error updating blog status");
    }
  };

  const handleModalSave = async (
    title: string,
    content: string,
    status: "draft" | "published",
    image: string
  ) => {
    if (selectedBlog) {
      try {
        await updateBlog(selectedBlog._id, { title, content, status, image });
      } catch (err) {
        setError("Error updating blog");
      }
    }
    handleModalClose();
  };

  const handleModalClose = () => {
    setIsModalOpen(false);
    setSelectedBlog(null);
  };

  const handleAddModalOpen = () => {
    setIsAddModalOpen(true);
  };

  const handleAddModalClose = () => {
    setIsAddModalOpen(false);
    setNewBlogTitle("");
    setNewBlogContent("");
    setNewBlogStatus("draft");
    setNewBlogImage("");
  };

  const handlePageChange = (newPage: number) => {
    setPage(newPage);
  };

  const handleAddBlog = async () => {
    try {
      const newBlog: Blog = {
        _id: "", // This will be generated by the server
        title: newBlogTitle,
        content: newBlogContent,
        image: newBlogImage,
        authorId: "", // Set the author ID as appropriate
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        status: newBlogStatus,
      };
      await addBlog(newBlog);
      handleAddModalClose(); // Close the modal after adding
    } catch (err) {
      setError("Error adding blog");
    }
  };

  const tableStyle: React.CSSProperties = {
    width: "100%",
    borderCollapse: "collapse",
    margin: "20px 0",
  };

  const thTdStyle: React.CSSProperties = {
    padding: "12px",
    textAlign: "left",
    border: "1px solid #ddd",
  };

  const thStyle: React.CSSProperties = {
    backgroundColor: "#f2f2f2",
  };

  const imgStyle: React.CSSProperties = {
    width: "100px",
    height: "100px",
  };

  const handleQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setQuery(e.target.value);
    setSearchBlog(e.target.value); // Update the search query directly
  };

  const handleStatusChangeInput = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setStatus(e.target.value);
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>{error}</div>;
  }

  return (
    <div>
      <h2>Healthmate - Manage Blogs</h2>

      <div style={styles.searchGroup}>
        <input
          type="text"
          value={query}
          onChange={handleQueryChange}
          placeholder="Search by title"
          style={styles.searchInput}
        />

        <select
          style={styles.searchSelect}
          value={status}
          onChange={handleStatusChangeInput}
        >
          <option value="">All Status</option>
          <option value="draft">Draft</option>
          <option value="published">Published</option>
        </select>

        <button style={styles.searchButton} onClick={handleSearch}>
          Search
        </button>

        <button onClick={handleAddModalOpen} style={styles.addButton}>
          Add
        </button>
      </div>

      <table style={tableStyle}>
        <thead>
          <tr>
            <th style={{ ...thTdStyle, ...thStyle }}>Title</th>
            <th style={{ ...thTdStyle, ...thStyle }}>Content</th>
            <th style={{ ...thTdStyle, ...thStyle }}>Status</th>
            <th style={{ ...thTdStyle, ...thStyle }}>Image</th>
            <th style={{ ...thTdStyle, ...thStyle }}>Action</th>
          </tr>
        </thead>
        <tbody>
          {blogs.map((blog) => (
            <tr key={blog._id}>
              <td style={thTdStyle}>{blog.title}</td>
              <td style={thTdStyle}>{blog.content}</td>
              <td style={thTdStyle}>
                <select
                  value={blog.status}
                  onChange={(e) =>
                    handleStatusChange(
                      blog._id,
                      e.target.value as "draft" | "published"
                    )
                  }
                >
                  <option value="draft">Draft</option>
                  <option value="published">Published</option>
                </select>
              </td>
              <td style={thTdStyle}>
                <img src={blog.image} alt={blog.title} style={imgStyle} />
              </td>
              <td style={thTdStyle}>
                <div style={styles.actionGroup}>
                  <button
                    style={styles.editButton}
                    onClick={() => handleEdit(blog)}
                  >
                    Edit
                  </button>
                  <button
                    style={styles.deleteButton}
                    onClick={() => handleDelete(blog._id)}
                  >
                    Delete
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <div style={styles.paginationContainer}>
        <div style={styles.pagination}>
          <button
            onClick={() => handlePageChange(page - 1)}
            disabled={page <= 1}
          >
            Previous
          </button>
          <span>Page {page}</span>
          <button
            onClick={() => handlePageChange(page + 1)}
            disabled={page * perPage >= totalBlogs}
          >
            Next
          </button>
        </div>
      </div>

      {/* Modal for adding a new blog */}
      {isAddModalOpen && (
        <div style={styles.modal}>
          <div style={styles.modalContent}>
            <h3>Add New Blog</h3>
            <input
              type="text"
              placeholder="Title"
              value={newBlogTitle}
              onChange={(e) => setNewBlogTitle(e.target.value)}
              style={styles.input}
            />
            <textarea
              placeholder="Content"
              value={newBlogContent}
              onChange={(e) => setNewBlogContent(e.target.value)}
              style={styles.textarea}
            />
            <select
              value={newBlogStatus}
              onChange={(e) =>
                setNewBlogStatus(e.target.value as "draft" | "published")
              }
              style={styles.select}
            >
              <option value="draft">Draft</option>
              <option value="published">Published</option>
            </select>
            <input
              type="text"
              placeholder="Image URL"
              value={newBlogImage}
              onChange={(e) => setNewBlogImage(e.target.value)}
              style={styles.input}
            />
            <button onClick={handleAddBlog} style={styles.saveButton}>
              Save
            </button>
            <button onClick={handleAddModalClose} style={styles.cancelButton}>
              Cancel
            </button>
          </div>
        </div>
      )}

      {/* Modal for editing a blog */}
      {isModalOpen && selectedBlog && (
        <div style={styles.modal}>
          <div style={styles.modalContent}>
            <h3>Edit Blog</h3>
            <input
              type="text"
              placeholder="Title"
              value={selectedBlog.title}
              onChange={(e) =>
                setSelectedBlog({ ...selectedBlog, title: e.target.value })
              }
              style={styles.input}
            />
            <textarea
              placeholder="Content"
              value={selectedBlog.content}
              onChange={(e) =>
                setSelectedBlog({ ...selectedBlog, content: e.target.value })
              }
              style={styles.textarea}
            />
            <select
              value={selectedBlog.status}
              onChange={(e) =>
                setSelectedBlog({
                  ...selectedBlog,
                  status: e.target.value as "draft" | "published",
                })
              }
              style={styles.select}
            >
              <option value="draft">Draft</option>
              <option value="published">Published</option>
            </select>
            <input
              type="text"
              placeholder="Image URL"
              value={selectedBlog.image}
              onChange={(e) =>
                setSelectedBlog({ ...selectedBlog, image: e.target.value })
              }
              style={styles.input}
            />
            <button
              onClick={() =>
                handleModalSave(
                  selectedBlog.title,
                  selectedBlog.content,
                  selectedBlog.status,
                  selectedBlog.image
                )
              }
              style={styles.saveButton}
            >
              Save Changes
            </button>
            <button onClick={handleModalClose} style={styles.cancelButton}>
              Cancel
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default BlogsTable;
